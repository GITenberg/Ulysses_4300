// -*- mode: js -*-

// this is a chaiscript file, but there is no wide syntax highlighting
// support for it yet, and js-mode is a close approximation.

global basepath = "annotations-raw"

var chapters = [
    "/index.php-telem.htm",
    "/index.php-nestor.htm",
    "/index.php-proteus.htm",
    "/index.php-calypso.htm",
    "/index.php-lotus.htm",
    "/index.php-hades.htm",
    "/index.php-aeolus.htm",
    "/index.php-lestry.htm",
    "/index.php-scylla.htm",
    "/index.php-wrocks.htm",
    "/index.php-sirens.htm",
    "/index.php-cyclops.htm",
    "/index.php-nausicaa.htm",
    "/index.php-oxen.htm",
    "/index.php-circe.htm",
    "/index.php-eumaeus.htm",
    "/index.php-ithaca.htm",
    "/index.php-penelope.htm"
]

// first stage clean up
def fix_basics(b) {
    b.find("<p class=\"newchapter\">");
    var main_pos = b.get_pos();

    b.goto_pos(main_pos); b.replace("'",         "’");
    b.goto_pos(main_pos); b.replace(" <br />",   "");
    b.goto_pos(main_pos); b.replace("<br />",    " ");
    b.goto_pos(main_pos); b.replace(" </i>",     "</i>");
    b.goto_pos(main_pos); b.replace("</i>!",     "!</i>");
    b.goto_pos(main_pos); b.replace("em>",       "i>");
    b.goto_pos(main_pos); b.replace("<a/>",      "</a>");
    b.goto_pos(main_pos); b.replace("</a<",      "</a>");
    b.goto_pos(main_pos); b.replace("</i>\n<i>", "\n");
    b.goto_pos(main_pos); b.replace("</i> \n<i>", "\n");
    b.goto_pos(main_pos); b.replace("&nbsp;",    "");
    b.goto_pos(main_pos); b.replace("&eacute;",  "é");
    b.goto_pos(main_pos); b.replace("&Eacute;",  "É");
    b.goto_pos(main_pos); b.replace("&agrave;",  "à");
    b.goto_pos(main_pos); b.replace("&egrave;",  "è");
    b.goto_pos(main_pos); b.replace("&uuml;",    "ü");
    b.goto_pos(main_pos); b.replace("&#8212;",   "&mdash;");

    b.goto_pos(main_pos);
    while(b.find("<span class=\"page\" ") >= 0) {
	b.rfind("<span class=\"page\" ");
	b.set_mark();
	b.find("</span>");
	b.erase_region();
    }
}

def fix_telem(b) {
     b.replace("bowl of bitter waters.", "bowl of bitter waters.</a>", 1);
     b.replace("et unam sanctam catholicam</i></a><a id=\"010115creed1\" class=\"box-images\" href=\"notes/010115creed.htm\"><i> et apostolicam
ecclesiam</i></a>:",
  	      "et unam sanctam catholicam et apostolicam ecclesiam:</i></a>", 1);
}

def fix_proteus(b) {
     b.replace("nous, Irlande,</i></a>", "nous, Irlande,</a></i>", 1);
}

def fix_nausicaa(b) {
    b.replace("<i>Leah,</i></a> <i>Lily of Killarney.</i>", "<i>Leah, Lily of Killarney.</i></a>", 1)
}

def fix_oxen(b) {
    b.replace("printed and bound at the <a", "printed and bound at the</a> <a", 1)
}

def fix_eumaeus(b) {
    b.replace("&deg 9", "&deg; 9", 1)
}

def fix_penelope(b) {
    b.replace("enteric fever<a id=\"010058bloodyswindle10\" class=\"box-images\" href=\"notes/010058bloodyswindle.htm\"> he", "enteric fever he", 1);
    b.replace("evening we kissed goodbye <a", "evening we kissed goodbye</a> <a", 1);
}

def fix_mismatches(b, chapter) {
    fix_basics(b);
    b.start_of_buffer();
    var ch_num = to_string(chapter+1);
    if(ch_num == "3") {
	b.replace("[3]", "[ 3 ]", 1);
    } else {
	b.replace("<font size=\"+2\">["+ch_num+"]</font>", "[ "+ch_num+" ]", 1);
    }
    switch(chapter) {
    case (0)  {fix_telem(b);	break;}
    case (2)  {fix_proteus(b);	break;}
    case (12) {fix_nausicaa(b); break;}
    case (13) {fix_oxen(b);	break;}
    case (15) {fix_eumaeus(b);  break;}
    case (17) {fix_penelope(b); break;}
    }
    b.start_of_buffer();
}

def insert_footnote(filename, id, epub) {
    var note_b = buffer(basepath + "/" + filename);
    if(note_b.empty()) {
	return false;
    }
    var title = "(title unknown)";
    if(note_b.find("<title>") >= 0) {
	note_b.set_mark();
	if (!note_b.goto_pos(note_b.find("</title>"))) {
	    print("error: title end tag not found: " + filename);
	    return false;
	}
	title = to_string(note_b.copy());
    } else {
	print("warning: unable to find title for note: " + filename);
    }
    if(note_b.find("<div id=\"note\">") < 0) {
	print("error: couldn't find starting point of note: " + filename);
	return false;
    }

    note_b.set_mark();
    note_b.goto_pos(note_b.find("</div>"));
    note_b.narrow_to_region();

    while(note_b.find("<a") >= 0) {
	note_b.backward(2);
	note_b.set_mark();
	note_b.find(">");
	note_b.erase_region();
    }
    note_b.start_of_buffer();
    note_b.replace("</a>", "");
    
    note_b.start_of_buffer();
    note_b.replace("<br>", "");
    
    note_b.start_of_buffer();
    note_b.replace("—", "&mdash;")

    // somefiles seem to have extra nested divs
    note_b.replace("<div id=\"note2\">", "");
    note_b.replace("<div id=\"note\">", "");

    note_b.start_of_buffer();
    if (note_b.find("<p>") < 0) {
	note_b.paste("<p>");
	note_b.end_of_buffer();
	note_b.paste("</p>");
    }

    note_b.start_of_buffer();
    if (note_b.find("<meta") >= 0) {
	note_b.backward(5);
	note_b.set_mark();
	note_b.find(">");
	note_b.erase_region();
    }
    note_b.start_of_buffer();
    note_b.replace("</meta>", "");

    note_b.start_of_buffer();
    note_b.paste("<font size=\"+1\"><em>" + id + ". " + title + "</em></font>\n");

    note_b.start_of_buffer();
    note_b.set_mark();
    note_b.end_of_buffer();
    var note = note_b.copy();
    epub.paste(("<div role=\"doc-footnote\" epub:type=\"footnote\" id=\"jpnote" + id + "\">") +
	       note +
	       ("<br/>Read more on <a href=\"http://joyceproject.com/"+filename+"\">joyceproject.com</a><br/>Back to <a href=\"#jpref" + id +"\" role=\"doc-backlink\" title=\"Go to note reference\">text</a>.</div><hr/>\n"));
    return true;
}

var epub = buffer("../4300-h/4300-h-updated.htm", must_open);
var main_cur = epub.new_cursor();
var notes_cur = epub.new_cursor();


epub.use_cursor(main_cur);
// add epub namespace so epub tags are recognized.
epub.find("1999/xhtml\"");
epub.paste(" xmlns:epub=\"http://www.idpf.org/2007/ops\"");

// insert pagebreak css
epub.find("p {");
epub.next_line();
epub.paste("div.pagebreak { page-break-after:always; }\n");


epub.find("<pre xml:space=\"preserve\">");
epub.set_mark();
epub.goto_pos(epub.find("</pre>"));
epub.erase_region();
epub.paste("
This is the annotated edition of Ulysses, by James Joyce.

The body of the novel is derived from the Project Gutenberg eBook of
Ulysses, the source files for which are available <a href=\"https://github.com/GITenberg/Ulysses_4300\">here</a>, under the
terms of the Gutenberg License, which can be found <a href=\"http://www.gutenberg.org/policy/license.html\">here</a>.

The annotations in this ebook are excerpts automatically generated
from longer notes on <a href=\"http://joyceproject.com\">joyceproject.com</a> with the permission of the
site's creator and curator, John Hunt. Under the terms of a Creative
Commons license, his work may be freely copied and distributed if
three conditions are met: no commercial uses, no alterations, and full
attribution.

Detailed instructions for generating this annotated ebook can be found
<a href=\"https://github.com/shsms/ulysses-annotated/blob/master/annotations.md\">here</a>.


Last Updated: December 23, 2020.




");

epub.find("</pre>");
epub.paste("<hr/>");

epub.paste(buffer("foreword.htm").get_contents());
epub.paste("<div class=\"pagebreak\"></div>");

// move notes_cur to end of novel text. notes will be inserted there.
epub.use_cursor(notes_cur);
epub.find("End of the Project Gutenberg EBook of Ulysses, by James Joyce");
epub.rfind("<pre");
var end_pos = epub.get_pos();
// add a page break followed by the Annotations heading.
epub.paste("<div class=\"pagebreak\"></div>\n\n<h2>Annotations</h2>");

epub.use_cursor(main_cur);

// go just after toc.
epub.find("<a name=\"link2HCH0001\" id=\"link2HCH0001\">");
epub.set_mark();
epub.goto_pos(end_pos);
epub.narrow_to_region(); // so that we don't match with text that we added as footnotes.
epub.start_of_buffer();  // goes to start of narrowed region.

// main logic
var total = 0;
var found = 0;
var not_found = 0;
for (var chapter = 0; chapter < 18; ++chapter) {
    var b = buffer(basepath+chapters[chapter]);

    fix_mismatches(b, chapter);

    b.find("class=\"newchapter\"");
    b.find(">");
    b.set_mark();
    b.find("<div id=\"footer\">");
    b.narrow_to_region();  // the chapter pages have <a> tags after the contents, keep them out.
    b.start_of_buffer();
    while(b.find("href=\"") >= 0) {
	b.set_mark();
	b.find("\"");
	b.backward(1);
	var url = to_string(b.copy());

	b.find(">");
	b.set_mark();
	b.find("</a>");
	b.backward(4);
	var text = b.copy();
	total += 1;
	epub.use_cursor(main_cur);
	// this phrase in chapter "penelope" comes at a different
	// place in the epub than in the joyceproject version.
	if (text == "the mens greenhouse") {
	    epub.rfind("<p>");
	}
	if(epub.find_fuzzy(text) >= 0) {
	    var f_str = to_string(found+1); // because found starts at 0.

	    epub.use_cursor(notes_cur);
	    if(insert_footnote(url, f_str, epub)) {
		epub.use_cursor(main_cur);
		epub.paste("<sup><a id=\"jpref"+f_str+"\" role=\"doc-noteref\" epub:type=\"noteref\" href=\"#jpnote" +f_str+ "\">"+f_str+"</a></sup>");
		found += 1;
	    } else {
		print("annotation_failed-"+chapters[chapter] + ": " + text)
	    }
	    // print("text found: (" + chapters[chapter] + ") " + text);
	} else {
	    print("text_not_found-" + chapters[chapter] + ": " + text);
	    not_found += 1;
	}
    }
}

print("total:" + to_string(total))
print("found:" + to_string(found))
print("not_found:" + to_string(not_found))
epub.save_as("../4300-h/4300-h-annotated.htm")
